<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ezreal.Extension.Core</name>
    </assembly>
    <members>
        <member name="P:Ezreal.Extension.Core.CommonFields.IntegerTypes">
            <summary>
            整数型类型
            <para>
            包含<see cref="T:System.Byte"/>、<see cref="T:System.SByte"/>、<see cref="T:System.Int16"/>、<see cref="T:System.UInt16"/>、<see cref="T:System.Int32"/>、<see cref="T:System.UInt32"/>、<see cref="T:System.Int64"/>、<see cref="T:System.UInt64"/>
            </para>
            </summary>
        </member>
        <member name="P:Ezreal.Extension.Core.CommonFields.FloatingPointTypes">
            <summary>
            浮点型类型
            <para>
            包含<see cref="T:System.Single"/>、<see cref="T:System.Double"/>、<see cref="T:System.Decimal"/>
            </para>
            </summary>
        </member>
        <member name="M:Ezreal.Extension.Core.GenericClassExtension.IsNull``1(``0)">
            <summary>
            指示指定的引用类型对象是否为<see langword="null"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.GenericStructExtension.IsDefault``1(``0)">
            <summary>
            指示指定的值类型是否是它的默认值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="struct"></param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.GenericStructExtension.IsNull``1(System.Nullable{``0})">
            <summary>
            指示指定的可空值类型对象是否为<see langword="null"/>
            <para>
            此扩展等同于<see langword="!"/><see cref="!:T?.HasValue"/>
            </para>
            </summary>
            <param name="nullableStruct"></param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.GenericStructExtension.IsNullOrDefault``1(System.Nullable{``0})">
            <summary>
            指示指定的可空值类型对象是否为<see langword="null"/>或其默认值<see langword="defalut"/>(<typeparamref name="T"/>)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nullableStruct"></param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.GenericStructExtension.ToEnum``2(``0)">
            <summary>
            将基础类型的值转换为指定枚举的值
            <para>
            可转换的类型包括<see cref="T:System.Byte"/>、<see cref="T:System.SByte"/>、<see cref="T:System.Int16"/>、<see cref="T:System.UInt16"/>、<see cref="T:System.Int32"/>、<see cref="T:System.UInt32"/>、<see cref="T:System.Int64"/>、<see cref="T:System.UInt64"/>
            </para>
            </summary>
            <typeparam name="TUnderlyingType">参数可以是<see cref="T:System.Byte"/>、<see cref="T:System.SByte"/>、<see cref="T:System.Int16"/>、<see cref="T:System.UInt16"/>、<see cref="T:System.Int32"/>、<see cref="T:System.UInt32"/>、<see cref="T:System.Int64"/>、<see cref="T:System.UInt64"/>其中的一种</typeparam>
            <typeparam name="TEnum">目标枚举类型</typeparam>
            <param name="value">待转换的值</param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.IEnumerableExtension.IsNullOrNoItems``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            指示指定的序列对象是 <see langword="null"/> 还是没有元素的空集合
            <para>
            等同于collection == <see langword="null"/> || !collection.Any()
            </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">将被校验的序列实例</param>
            <returns>如果<paramref name="collection"/> 参数为 <see langword="null"/> 或没有<typeparamref name="T"/>实例的空集合，则为 <see langword="true"/>；否则为 <see langword="false"/>。</returns>
        </member>
        <member name="M:Ezreal.Extension.Core.IEnumerableExtension.PadLeft``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            返回使用默认元素将序列向列首补齐得到的新序列
            </summary>
            <param name="collection">原有序列</param>
            <param name="count">新序列的元素总数</param>
            <param name="item">用于补齐的元素</param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.IEnumerableExtension.PadRight``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            返回使用默认元素将序列向列尾补齐得到的新序列
            </summary>
            <param name="collection">原有序列</param>
            <param name="count">新序列的元素总数</param>
            <param name="item">用于补齐的元素</param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.IEnumerableExtension.PadLeft``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            返回使用指定元素将序列向列首补齐得到的新序列
            </summary>
            <param name="collection">原有序列</param>
            <param name="count">新序列的元素总数</param>
            <param name="item">用于补齐的元素</param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.IEnumerableExtension.PadRight``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <summary>
            返回使用指定元素将序列向列尾补齐得到的新序列
            </summary>
            <param name="collection">原有序列</param>
            <param name="count">新序列的元素总数</param>
            <param name="item">用于补齐的元素</param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.IEnumerableExtension.JoinAsString``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            将集合连接为带分隔符的字符串
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="collection">集合</param>
            <param name="quotes">引号，默认不带引号，范例：单引号 "'"</param>
            <param name="separator">分隔符，默认使用逗号分隔</param>
        </member>
        <member name="M:Ezreal.Extension.Core.DataSetExtension.IsNullOrNoTables(System.Data.DataSet)">
            <summary>
            指示指定的<see cref="T:System.Data.DataSet"/>对象是 <see langword="null"/> 还是没有<see cref="T:System.Data.DataTable"/>的空集合
            <para>
            等同于ds == <see langword="null"/> || ds.Tables.Count &lt;= 0
            </para>
            </summary>
            <param name="ds">将被校验的<see cref="T:System.Data.DataSet"/>实例</param>
            <returns>如果<paramref name="ds"/> 参数为 <see langword="null"/> 或没有<see cref="T:System.Data.DataTable"/>的空集合，则为 <see langword="true"/>；否则为 <see langword="false"/>。</returns>
        </member>
        <member name="M:Ezreal.Extension.Core.DataTableExtension.IsNullOrNoRows(System.Data.DataTable)">
            <summary>
            指示指定的<see cref="T:System.Data.DataTable"/>对象是 <see langword="null"/> 还是没有<see cref="T:System.Data.DataRow"/>的空集合
            <para>
            等同于dt == <see langword="null"/> || dt.Rows.Count &lt;= 0
            </para>
            </summary>
            <param name="dt">将被校验的<see cref="T:System.Data.DataTable"/>实例</param>
            <returns>如果<paramref name="dt"/> 参数为 <see langword="null"/> 或没有<see cref="T:System.Data.DataRow"/>的空集合，则为 <see langword="true"/>；否则为 <see langword="false"/>。</returns>
        </member>
        <member name="M:Ezreal.Extension.Core.EnumExtension.GetUnderlyingValue``1(System.Enum)">
            <summary>
            获取枚举的基类型值
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.EnumExtension.GetDescription(System.Enum,System.Boolean)">
            <summary>
            获得枚举的<see cref="T:System.ComponentModel.DescriptionAttribute"/>
            </summary>
            <param name="value">枚举值</param>
            <param name="nameInstend">当枚举没有定义<see cref="T:System.ComponentModel.DescriptionAttribute"/>,是否用枚举名代替，默认使用</param>
            <returns>枚举的Description</returns>
        </member>
        <member name="M:Ezreal.Extension.Core.StringExtension.IsNullOrEmpty(System.String)">
            <summary>
            指示指定的字符串是 <see langword="null" /> 还是<see cref="F:System.String.Empty"/> 字符串。
            </summary>
            <param name="value">要测试的字符串。</param>
            <returns>如果参数<paramref name="value"/>的值为<see langword="null"/>或者等同于<see cref="F:System.String.Empty"/>的空字符串,则返回<see langword="true"/>,否则返回<see langword="false"/></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.StringExtension.IsNullOrWhiteSpace(System.String)">
            <summary>
            指示指定的字符串是 <see langword="null" /> 还是<see cref="F:System.String.Empty"/> 字符串。
            </summary>
            <param name="value">要测试的字符串。</param>
            <returns>如果参数<paramref name="value"/>的值为<see langword="null"/>或者等同于<see cref="F:System.String.Empty"/>的空字符串或者仅由空白字符组成,则返回<see langword="true"/>,否则返回<see langword="false"/></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.StringExtension.IsArabicNumber(System.String)">
            <summary>
            指示指定的<see cref="T:System.String"/>对象是否是纯阿拉伯数字的组合
            </summary>
            <param name="text">要测试的<see cref="T:System.String"/>实例</param>
            <returns>如果<paramref name="text"/> 参数为是纯数字则为 <see langword="true"/>；否则为  <see langword="false"/>。</returns>
        </member>
        <member name="M:Ezreal.Extension.Core.StringExtension.ToNumber``1(System.String)">
            <summary>
            转换指定的字符串为目标数字类型
            <para>
            当目标类型为<see cref="T:System.Byte"/>、<see cref="T:System.SByte"/>、<see cref="T:System.Int16"/>、<see cref="T:System.UInt16"/>、<see cref="T:System.Int32"/>、<see cref="T:System.UInt32"/>、<see cref="T:System.Int64"/>、<see cref="T:System.UInt64"/>时将要转换的字符串不应包含小数部分
            </para>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.StringExtension.TryParseGuid(System.String,System.Guid@)">
            <summary>
            尝试将字符串转化成<see cref="T:System.Guid"/>
            </summary>
            <param name="text">待转换的<see cref="T:System.String"/>实例</param>
            <param name="guid">承载转换后值的<see cref="T:System.Guid"/>实例</param>
            <returns>转换成功时返回<see langword="true"/>并可从<paramref name="guid"/>获取转换后的<see cref="T:System.Guid"/>实例</returns>
        </member>
        <member name="M:Ezreal.Extension.Core.TypeExtension.GetChildTypes(System.Type)">
            <summary>
            获取类型所在<see cref="T:System.Reflection.Assembly"/>中定义的子类
            </summary>
            <param name="type">需要查找子类的类型实例</param>
            <returns></returns>
        </member>
        <member name="M:Ezreal.Extension.Core.TypeExtension.GetChildTypes(System.Type,System.Reflection.Assembly)">
            <summary>
            获取类型在指定<see cref="T:System.Reflection.Assembly"/>中定义的子类
            </summary>
            <param name="type">需要查找子类的类型实例</param>
            <param name="assembly">需要查找的程序集</param>
            <returns></returns>
        </member>
    </members>
</doc>
